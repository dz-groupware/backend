<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.backend.companymgmt.mapper.CompanyMgmtMapper">



  <select id="getCompanyDetailsById"
    resultType="com.example.backend.companymgmt.dto.CompanyMgmtResDto">
    SELECT c.id,c.par_id,c.code, c.enabled_yn, c.name, c.abbr, c.business_type,
    c.rep_name, c.rep_id_num, u.priv_email,
    c.rep_tel,e.gender,u.login_id,u.login_pw, c.business_num, c.corp_type, c.corp_num, c.establishment_date,
    c.opening_date, c.closing_date, c.address, u.deleted_yn, e.id
    FROM company c
    JOIN employee_company ec ON ec.comp_id = c.id
    JOIN employee e ON ec.emp_id = e.id
    JOIN user u ON u.id = e.user_id
    WHERE e.emp_id_num = (SELECT rep_id_num FROM company WHERE id = #{id}) AND c.id=#{id};
  </select>

  <select id="getAllCompanyMgmtParList" resultType="com.example.backend.companymgmt.dto.CompanyMgmtListResDto">
    SELECT id,code,name,corp_type,rep_name FROM company WHERE deleted_yn=false AND id_tree LIKE CONCAT('%', #{companyId}, '%')
  </select>

  <select id="findCompanyMgmtList" resultType="com.example.backend.companymgmt.dto.CompanyMgmtListResDto">
    SELECT id,code,name,corp_type,rep_name FROM company where deleted_yn=false and name LIKE #{name}
    and enabled_yn=#{enabledYn} AND id_tree LIKE CONCAT('%', #{companyId}, '%')
  </select>

  <select id="findAllCompanyMgmtList"
    resultType="com.example.backend.companymgmt.dto.CompanyMgmtListResDto">
    SELECT id,code,name,corp_type,rep_name FROM company WHERE deleted_yn=false and name LIKE #{name} AND id_tree LIKE CONCAT('%', #{companyId}, '%')
  </select>



  <select id="findOpenCompanyMgmtList" resultType="com.example.backend.companymgmt.dto.CompanyMgmtListResDto">
    SELECT id,code,name,corp_type,rep_name FROM company where deleted_yn=false and name LIKE #{name}
    and enabled_yn=#{enabledYn} AND id_tree LIKE CONCAT('%', #{companyId}, '%') AND closing_date IS NULL
  </select>

  <select id="findOpenAllCompanyMgmtList"
          resultType="com.example.backend.companymgmt.dto.CompanyMgmtListResDto">
    SELECT id,code,name,corp_type,rep_name FROM company WHERE deleted_yn=false and name LIKE #{name} AND id_tree LIKE CONCAT('%', #{companyId}, '%') AND closing_date IS NULL
  </select>




  <select id="findCloseCompanyMgmtList" resultType="com.example.backend.companymgmt.dto.CompanyMgmtListResDto">
    SELECT id,code,name,corp_type,rep_name FROM company where deleted_yn=false and name LIKE #{name}
    and enabled_yn=#{enabledYn} AND id_tree LIKE CONCAT('%', #{companyId}, '%') AND closing_date IS NOT NULL
  </select>

  <select id="findCloseAllCompanyMgmtList"
          resultType="com.example.backend.companymgmt.dto.CompanyMgmtListResDto">
    SELECT id,code,name,corp_type,rep_name FROM company WHERE deleted_yn=false and name LIKE #{name} AND id_tree LIKE CONCAT('%', #{companyId}, '%') AND closing_date IS NOT NULL
  </select>


  <select id="getCompanyMgmtList"
          resultType="com.example.backend.companymgmt.dto.CompanyMgmtListResDto">
    SELECT id, code, name, corp_type, rep_name
    FROM company
    WHERE deleted_yn = false AND (id = #{companyId} OR id_tree LIKE CONCAT('%', #{id}, '%'))
  </select>

  <select id="getCompanyMgmtNameTreeList" resultType="com.example.backend.companymgmt.dto.CompanyMgmtTreeListResDto">
    SELECT id, par_id, name_tree
    FROM company
    WHERE deleted_yn = false AND (id = #{companyId} OR id_tree LIKE CONCAT('%', #{id}, '%'))
  </select>


  <select id="getOpenedCompanyMgmtList"
          resultType="com.example.backend.companymgmt.dto.CompanyMgmtListResDto">
    SELECT id,code,name,corp_type,rep_name FROM company where deleted_yn=false  AND id_tree LIKE CONCAT('%', #{companyId}, '%') AND closing_date IS NULL
  </select>
  <select id="getClosedCompanyMgmtList"
          resultType="com.example.backend.companymgmt.dto.CompanyMgmtListResDto">
    SELECT id,code,name,corp_type,rep_name FROM company where deleted_yn=false  AND id_tree LIKE CONCAT('%', #{companyId}, '%') AND closing_date IS NOT NULL
  </select>



<!--post-->

  <select id="getUserId" resultType="Long">
    SELECT user_id FROM employee WHERE id=#{dto.employeeId}
  </select>
<select id ="getInfoDuplicated" resultType ="Boolean">
  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
  FROM company WHERE code=#{code} OR corp_num=#{corpNum} OR business_num=#{businessNum}
</select>

  <insert id="addCompanyMgmt" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO company
    (par_id, code, enabled_yn, name, abbr, business_type, rep_name, rep_id_num,
    rep_tel, business_num, corp_type, corp_num, establishment_date, opening_date, closing_date,
    address,child_node_yn)
    VALUES
    (#{parId}, #{code}, #{enabledYn}, #{name}, #{abbr}, #{businessType}, #{repName}, #{repIdNum}, #{repTel},
    #{businessNum}, #{corpType}, #{corpNum}, #{establishmentDate}, #{openingDate}, #{closingDate}, #{address},1 )
  </insert>

  <insert id="addCompanyMgmtUser" useGeneratedKeys="true" keyProperty="dto.id">
    INSERT INTO `user` (`name`, `gender`, `priv_email`, `mobile_number`, `home_number`, `address`, `login_id`, `login_pw`, `user_id_num`,`deleted_yn`)
    VALUES (#{dto.repName}, #{dto.gender}, #{dto.privEmail}, #{dto.repTel}, null, null, #{dto.loginId},
    #{dto.loginPw}, #{dto.repIdNum},0)
  </insert>


<insert id="addCompanyMgmtEmployee" useGeneratedKeys="true" keyProperty="dto.id">
  INSERT INTO employee (`user_id`, `name`, `gender`,  `account_yn`,
  `mobile_number`, `home_number`, `address`, `emp_id_num`, `last_access`, `position`,`master_yn`,`deleted_yn`)
  VALUES (#{userId}, #{dto.repName}, #{dto.gender},  1 , #{dto.repTel},
  "", "", #{dto.repIdNum}, NOW(),"대표",1,0)
</insert>

  <insert id="addCompanyMgmtEmployeeCompany">
INSERT INTO  employee_company (`comp_id`,`emp_id`,`resigned_yn`,`join_date`,`resignation_date`, `deleted_yn`)
    VALUES(#{companyId}, #{employeeId}, 0, NOW(), null, 0)
  </insert>


  <update id="addIdTreeAndNameTreeWithLastInsertId">
    UPDATE company
    SET par_id=LAST_INSERT_ID(),id_tree=LAST_INSERT_ID(),name_tree=#{name}
    WHERE id = LAST_INSERT_ID()
  </update>

  <select id="findParIdTreeAndNameTreeWithParId" resultType="java.util.Map">
    SELECT id_tree AS parIdTree ,name_tree AS parNameTree FROM company WHERE id=#{parId}
  </select>

  <update id="addIdTreeAndNameTreeWithParIdTree">
    UPDATE company
    SET id_tree = CONCAT(#{parIdTree}, '>', LAST_INSERT_ID()),
    name_tree= CONCAT(#{parNameTree}, '>', #{name})
    WHERE id = LAST_INSERT_ID()
  </update>






<!--modify-->


  <select id="checkCircularReference" resultType="int">
    SELECT COUNT(*)
    FROM company
    WHERE id = #{parId}
    AND id_tree LIKE CONCAT('%', #{id} , '%')
  </select>


  <select id="getParIdFromDB" resultType="Long">
    SELECT par_id FROM company WHERE id=#{id}
  </select>

  <select id="checkParHaveChild" resultType="Boolean">
    SELECT CASE
    WHEN EXISTS(
    SELECT 1
    FROM company
    WHERE par_id=#{originalParId} AND id != #{originalParId}
    ) THEN TRUE ELSE FALSE
    END
  </select>



  <update id="doNotHaveChild">
    UPDATE company
    SET child_node_yn = 1
    WHERE id= #{originalParId}
  </update>


  <update id="modifyCompanyMgmt">
    UPDATE company SET
    par_id=#{parId}, enabled_yn=#{enabledYn}, name=#{name}, abbr=#{abbr},
    business_type=#{businessType},
    rep_name=#{repName}, rep_id_num=#{repIdNum},
    rep_tel=#{repTel}, business_num=#{businessNum}, corp_type=#{corpType}, corp_num=#{corpNum},
    establishment_date= #{establishmentDate},
    opening_date=#{openingDate}, closing_date=#{closingDate},address=#{address}
    WHERE id=#{id}
  </update>


  <select id="getTreeFromDB" resultType="java.util.Map">
    SELECT id_tree AS originalIdTree,name_tree AS originalNameTree FROM company where id=#{id}
  </select>

  <update id="updateDoNotHaveParTree">
    UPDATE company
    SET id_tree = REPLACE(id_tree, #{originalIdTree}, #{id})
    ,name_tree = REPLACE(name_tree, #{originalNameTree},#{name})
    WHERE id_tree LIKE CONCAT('%', #{originalIdTree}, '%') or
    name_tree LIKE CONCAT('%', #{originalNameTree}, '%')
  </update>

  <update id="haveChildNode">
    UPDATE company SET child_node_yn=0 where id=#{parId}
  </update>



  <update id="updateHaveParTree">
    UPDATE company
    SET id_tree = REPLACE(id_tree, #{originalIdTree},CONCAT(#{parIdTree},'>', #{id}))
    ,name_tree = REPLACE(name_tree, #{originalNameTree},CONCAT(#{parNameTree},'>', #{name}))
    WHERE id_tree LIKE CONCAT('%', #{originalIdTree}, '%') or
    name_tree LIKE CONCAT('%', #{originalNameTree}, '%')
  </update>


  <update id="modifyCompanyMgmtWithClosingDate">
    UPDATE company SET
    par_id=#{parId}, enabled_yn=0, name=#{name}, abbr=#{abbr},
    business_type=#{businessType},
    rep_name=#{repName}, rep_id_num=#{repIdNum},
    rep_tel=#{repTel}, business_num=#{businessNum}, corp_type=#{corpType}, corp_num=#{corpNum},
    establishment_date= #{establishmentDate},
    opening_date=#{openingDate}, closing_date=#{closingDate},address=#{address},deleted_yn=1
    WHERE id=#{id}
  </update>



<!--delete-->

  <select id="findIdAtIdTree" resultType="java.lang.Long">
    SELECT id FROM company WHERE id_tree LIKE CONCAT('%', #{id}, '%')
  </select>

  <update id="removeCompanyMgmtCompany">
    UPDATE company SET deleted_yn=1
    WHERE id=#{removeId}
  </update>
  <select id="findEmployeeIdsByCompId" resultType="java.lang.Long">
    SELECT emp_id
    FROM employee_company
    WHERE comp_id=#{removeId}
  </select>

  <update id="removeCompanyMgmtEmployee">
    UPDATE employee SET deleted_yn=1
    WHERE id=#{empId}
  </update>

  <update id="removeCompanyMgmtEmployeeCompany">
    UPDATE employee_company SET deleted_yn=1
    WHERE comp_id=#{removeId}
  </update>





  <select id="checkSignUp"
          resultType="com.example.backend.companymgmt.dto.CompanyMgmtCeoResDto">
    SELECT
    id, gender, login_id, login_pw, priv_email
    FROM (
      SELECT e.id,u.gender, u.login_id, u.login_pw, u.priv_email,
      ROW_NUMBER() OVER(PARTITION BY e.user_id ORDER BY ed.id asc) AS rn
      FROM employee e
      INNER JOIN user u ON e.user_id = u.id
      INNER JOIN employee_company ec ON e.id = ec.emp_id
      LEFT JOIN employee_department ed ON e.id = ed.emp_id
      WHERE e.name = #{dto.repName} AND e.emp_id_num=#{dto.repIdNum}
      AND u.priv_email=#{dto.privEmail}
      AND u.mobile_number=#{dto.repTel}
    ) AS RankedEmployees
    WHERE rn = 1;
  </select>

  <select id="checkDuplicates" resultType="Boolean">
    SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
    FROM user WHERE user_id_num=#{dto.repIdNum} or
    priv_email=#{dto.privEmail} or mobile_number=#{dto.repTel}
  </select>


</mapper>