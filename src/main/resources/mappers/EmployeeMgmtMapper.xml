<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.backend.employeemgmt.mapper.EmployeeMgmtMapper">


<select id="getEmployeeMgmtList"
        resultType="com.example.backend.employeemgmt.dto.EmployeeMgmtListResDto">
    SELECT
    id, login_id, image_url, name, join_date
    FROM (
    SELECT e.id, u.login_id, e.image_url, u.name, ec.join_date,
    ROW_NUMBER() OVER(PARTITION BY e.user_id ORDER BY ed.id asc) AS rn
    FROM employee e
    INNER JOIN user u ON e.user_id = u.id
    INNER JOIN employee_company ec ON e.id = ec.emp_id
    LEFT JOIN employee_department ed ON e.id = ed.emp_id
    WHERE u.deleted_yn = false AND ec.comp_id = #{companyId}
    ) AS RankedEmployees
    WHERE rn = 1;
</select>
    <select id="getEmployeeMgmtDetailsById"
            resultType="com.example.backend.employeemgmt.dto.EmployeeMgmtResDto">
        SELECT e.id,e.image_url,u.name, u.user_id_num, u.gender, e.account_yn,
        u.login_id, u.login_pw, u.priv_email,
        u.mobile_number, e.home_number, e.address, ec.join_date AS ec_join_date, ec.resignation_date,
        ed.id AS departmentId , ec.comp_id,e.position,ed.dept_id,ed.transferred_yn,ed.join_date AS ed_join_date,ed.left_date
        ,e.deleted_yn
        FROM employee e
        INNER JOIN user u ON e.user_id=u.id
        INNER JOIN employee_company ec ON e.id=ec.emp_id
        LEFT JOIN employee_department ed ON e.id=ed.emp_id
        WHERE e.id=#{empId} AND ec.comp_id=#{companyId} AND  (ed.transferred_yn=false or ed.transferred_yn is NULL)
    </select>


    <select id="getEmployeeMgmtOnlyBasicDetailsById"
            resultType="com.example.backend.employeemgmt.dto.EmployeeMgmtResDto">
        SELECT e.id,e.image_url,u.name, u.user_id_num, u.gender, e.account_yn,
        u.login_id, u.login_pw, u.priv_email,
        u.mobile_number, e.home_number, e.address, ec.join_date AS ec_join_date, ec.resignation_date,
        ed.id AS departmentId , ec.comp_id,e.position,ed.dept_id,ed.transferred_yn,ed.join_date AS ed_join_date,ed.left_date
        ,e.deleted_yn
        FROM employee e
        INNER JOIN user u ON e.user_id=u.id
        INNER JOIN employee_company ec ON e.id=ec.emp_id
        LEFT JOIN employee_department ed ON e.id=ed.emp_id
        WHERE e.id=#{empId} AND ec.comp_id=#{companyId}
    </select>


    <select id="getAllDepartmentMgmtList"  resultType="java.util.Map">
        SELECT id,name FROM department where deleted_yn=false AND comp_id=#{companyId}
    </select>


    <!-- text 랑 id 둘다로 찾는거 -->
    <select id="findEmployeeMgmtList" resultType="com.example.backend.employeemgmt.dto.EmployeeMgmtListResDto">
        SELECT
        id, login_id, image_url, name, join_date
        FROM (
        SELECT u.id, u.login_id, e.image_url, u.name, ec.join_date,
        ROW_NUMBER() OVER(PARTITION BY u.id ORDER BY ed.id DESC) AS rn
        FROM user u
        INNER JOIN employee e ON u.id = e.user_id
        INNER JOIN employee_company ec ON e.id = ec.emp_id
        LEFT JOIN employee_department ed ON e.id = ed.emp_id
        WHERE u.deleted_yn = false AND ec.comp_id = #{compId} AND (ed.org=1 or ed.org is NULL) AND ec.resigned_yn=false
        AND (
        u.name LIKE CONCAT('%', #{text}, '%')
        OR u.priv_email  LIKE CONCAT('%', #{text}, '%')
        OR u.login_id  LIKE CONCAT('%', #{text}, '%')
        )
        ) AS RankedEmployees
        WHERE rn = 1;
    </select>


    <!-- text로만 찾는거 -->
    <select id="findEmployeeMgmtListByText" resultType="com.example.backend.employeemgmt.dto.EmployeeMgmtListResDto">
        SELECT
        id, login_id, image_url, name, join_date
        FROM (
        SELECT u.id, u.login_id, e.image_url, u.name, ec.join_date,
        ROW_NUMBER() OVER(PARTITION BY u.id ORDER BY ed.id DESC) AS rn
        FROM user u
        INNER JOIN employee e ON u.id = e.user_id
        INNER JOIN employee_company ec ON e.id = ec.emp_id
        LEFT JOIN employee_department ed ON e.id = ed.emp_id
        WHERE u.deleted_yn = false AND ec.comp_id = #{companyId} AND (ed.org=1 or ed.org is NULL) AND ec.resigned_yn=false
        AND (
        u.name LIKE CONCAT('%', #{text}, '%')
        OR u.priv_email  LIKE CONCAT('%', #{text}, '%')
        OR u.login_id  LIKE CONCAT('%', #{text}, '%')
        )
        ) AS RankedEmployees
        WHERE rn = 1;
    </select>

    <!-- 회사 id 로만 찾는거 -->
    <select id="findEmployeeMgmtListById" resultType="com.example.backend.employeemgmt.dto.EmployeeMgmtListResDto">
        SELECT
        id, login_id, image_url, name, join_date
        FROM (
        SELECT u.id, u.login_id, e.image_url, u.name, ec.join_date,
        ROW_NUMBER() OVER(PARTITION BY u.id ORDER BY ed.id DESC) AS rn
        FROM user u
        INNER JOIN employee e ON u.id = e.user_id
        INNER JOIN employee_company ec ON e.id = ec.emp_id
        LEFT JOIN employee_department ed ON e.id = ed.emp_id
        WHERE u.deleted_yn = false AND ec.comp_id = #{compId} AND (ed.org=1 or ed.org is NULL) AND ec.resigned_yn=false
        ) AS RankedEmployees
        WHERE rn = 1;
    </select>


<!--    새로 사원 만들기-->

    <insert id="addEmployeeMgmtUser" useGeneratedKeys="true" keyProperty="dto.id">
        INSERT INTO `user` (`name`, `gender`, `priv_email`, `mobile_number`, `home_number`, `address`, `login_id`, `login_pw`, `user_id_num`,`deleted_yn`)
        VALUES (#{dto.name}, #{dto.gender}, #{dto.privEmail}, #{dto.mobileNumber}, #{dto.homeNumber}, #{dto.address}, #{dto.loginId},
        #{dto.loginPw}, #{dto.empIdNum},#{dto.deletedYn})
    </insert>

    <insert id="addEmployeeMgmtEmployee" useGeneratedKeys="true" keyProperty="dto.id">
        INSERT INTO `employee` (`user_id`, `name`, `gender`, `image_url`, `account_yn`,
        `mobile_number`, `home_number`, `address`, `emp_id_num`, `last_access`, `position`,`master_yn`,`deleted_yn`)
        VALUES (#{userId}, #{dto.name}, #{dto.gender}, #{dto.imageUrl}, #{dto.accountYn}, #{dto.mobileNumber},
        #{dto.homeNumber}, #{dto.address}, #{dto.empIdNum}, NOW(),#{dto.position},#{masterYn},#{dto.deletedYn})
    </insert>
    <insert id="addEmployeeMgmtEmployeeCompany" >
        INSERT INTO `employee_company` (`comp_id`, `emp_id`, `join_date`, `resignation_date`,`deleted_yn`,`resigned_yn`)
        VALUES (#{dto.compId}, #{dto.id}, #{dto.joinDate}, #{dto.resignationDate},#{dto.deletedYn},#{resignedYn})
    </insert>

    <insert id="addEmployeeMgmtEmployeeDepartment" >
        INSERT INTO `employee_department` (`dept_id`, `emp_id`, `transferred_yn`,`join_date`, `left_date`, `org`,`position`,`deleted_yn`)
        VALUES (#{dto.deptId}, #{dto.id},#{dto.transferredYn} ,#{dto.edjoinDate}, #{dto.leftDate},#{org},#{dto.position},#{dto.deletedYn})
    </insert>

    <select id="getUserIdByUniqueInfo">
        SELECT id FROM user
        WHERE name=#{name} AND priv_email=#{privEmail} AND mobile_number=#{mobileNumber} AND
        login_id=#{loginId} AND user_id_num=#{empIdNum}
    </select>




<!--    부서정보 수정시 추가-->

    <insert id="addEmployeeMgmtEmployeeModify" useGeneratedKeys="true" keyProperty="dto.id">
        INSERT INTO `employee` (`user_id`, `name`, `gender`, `image_url`, `account_yn`,
        `mobile_number`, `home_number`, `address`, `emp_id_num`, `last_access`, `position`,`master_yn`,`deleted_yn`)
        VALUES (#{userId}, #{dto.name}, #{dto.gender}, #{dto.imageUrl}, #{dto.accountYn}, #{dto.mobileNumber},
        #{dto.homeNumber}, #{dto.address}, #{dto.empIdNum}, NOW(),#{dto.position},#{masterYn},#{dto.deletedYn})
    </insert>




<!--    delete-->
    <select id="getUserIdById" resultType="Long">
        SELECT user_id FROM employee WHERE id=#{id}
    </select>


    <select id="getEmployeeIdsByUserId" resultType="Long">
        SELECT id FROM employee WHERE user_id=#{userId}
    </select>


    <update id="removeEmployeeMgmtUser">
    UPDATE user u
    JOIN employee e ON e.user_id = u.id
    SET
    u.name = #{dto.name},
    u.user_id_num = #{dto.empIdNum},
    u.gender = #{dto.gender},
    u.login_id = #{dto.loginId},
    u.login_pw = #{dto.loginPw},
    u.priv_email = #{dto.privEmail},
    u.mobile_number = #{dto.mobileNumber},
    u.home_number = #{dto.homeNumber},
    u.address = #{dto.address},
    u.deleted_yn = #{dto.deletedYn}
    WHERE e.id = #{empId}
    </update>
    <update id="removeEmployeeMgmtEmployee">
        UPDATE employee e
        SET
        e.image_url = #{dto.imageUrl},
        e.name = #{dto.name},
        e.emp_id_num = #{dto.empIdNum},
        e.gender = #{dto.gender},
        e.account_yn = #{dto.accountYn},
        e.mobile_number = #{dto.mobileNumber},
        e.home_number = #{dto.homeNumber},
        e.address = #{dto.address},
        e.position = #{dto.position},
        e.deleted_yn = #{dto.deletedYn}
        WHERE e.id = #{empId}

    </update>
    <update id="removeEmployeeMgmtEmployeeCompany">
        UPDATE employee_company ec
        JOIN employee e ON e.id = ec.emp_id
        SET
        ec.join_date = #{dto.joinDate},
        ec.resignation_date = #{dto.resignationDate},
        ec.comp_id = #{dto.compId},
        ec.resigned_yn = #{resignedYn},
        ec.deleted_yn = #{dto.deletedYn}
        WHERE e.id = #{empId}

    </update>

    <update id="removeEmployeeMgmtEmployeeDepartment">
        UPDATE employee_department ed
        JOIN employee e ON e.id = ed.emp_id
        SET
        ed.position = #{dto.position},
        ed.dept_id = #{dto.deptId},
        ed.transferred_yn = #{dto.transferredYn},
        ed.join_date = #{dto.edjoinDate},
        ed.left_date = #{dto.leftDate},
        ed.deleted_yn = #{dto.deletedYn}
        WHERE e.id = #{empId} AND ed.id=#{dto.departmentId}

    </update>

<!--    수정-->

    <update id="modifyEmployeeMgmtUser">
        UPDATE user u
        JOIN employee e ON e.user_id = u.id
        SET
        u.name = #{dto.name},
        u.user_id_num = #{dto.empIdNum},
        u.gender = #{dto.gender},
        u.login_id = #{dto.loginId},
        u.login_pw = #{dto.loginPw},
        u.priv_email = #{dto.privEmail},
        u.mobile_number = #{dto.mobileNumber},
        u.home_number = #{dto.homeNumber},
        u.address = #{dto.address},
        u.deleted_yn = #{dto.deletedYn}
        WHERE e.id = #{empId}
    </update>
    <update id="modifyEmployeeMgmtEmployee">
        UPDATE employee e
        SET
        e.image_url = #{dto.imageUrl},
        e.name = #{dto.name},
        e.emp_id_num = #{dto.empIdNum},
        e.gender = #{dto.gender},
        e.account_yn = #{dto.accountYn},
        e.mobile_number = #{dto.mobileNumber},
        e.home_number = #{dto.homeNumber},
        e.address = #{dto.address},
        e.position = #{dto.position},
        e.deleted_yn = #{dto.deletedYn}
        WHERE e.id = #{empId}

    </update>
    <update id="modifyEmployeeMgmtEmployeeCompany">
        UPDATE employee_company ec
        JOIN employee e ON e.id = ec.emp_id
        SET
        ec.join_date = #{dto.joinDate},
        ec.resignation_date = #{dto.resignationDate},
        ec.comp_id = #{dto.compId},
        ec.resigned_yn = #{resignedYn},
        ec.deleted_yn = #{dto.deletedYn}
        WHERE e.id = #{empId}

    </update>

    <update id="modifyEmployeeMgmtEmployeeDepartment">
        UPDATE employee_department ed
        JOIN employee e ON e.id = ed.emp_id
        SET
        ed.position = #{dto.position},
        ed.dept_id = #{dto.deptId},
        ed.transferred_yn = #{dto.transferredYn},
        ed.join_date = #{dto.edjoinDate},
        ed.left_date = #{dto.leftDate},
        ed.org = #{org},
        ed.deleted_yn = #{dto.deletedYn}
        WHERE e.id = #{empId} AND ed.id=#{dto.departmentId}

    </update>


<select id="checkLoginId" resultType="Boolean">
    SELECT login_id FROM user WHERE login_id=#{loginId}
</select>

    <select id="checkSignUp"
            resultType="com.example.backend.employeemgmt.dto.EmployeeMgmtListResDto">
        SELECT
        id, login_id, image_url, name, join_date
        FROM (
        SELECT e.id, u.login_id, e.image_url, u.name, ec.join_date,
        ROW_NUMBER() OVER(PARTITION BY e.user_id ORDER BY ed.id asc) AS rn
        FROM employee e
        INNER JOIN user u ON e.user_id = u.id
        INNER JOIN employee_company ec ON e.id = ec.emp_id
        LEFT JOIN employee_department ed ON e.id = ed.emp_id
        WHERE e.name = #{dto.name} AND e.emp_id_num=#{dto.empIdNum}
        AND u.priv_email=#{dto.privEmail}
        AND u.mobile_number=#{dto.mobileNumber}
        ) AS RankedEmployees
        WHERE rn = 1;
    </select>

    <select id="checkDuplicates" resultType="Boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM user WHERE user_id_num=#{dto.empIdNum} or
        priv_email=#{dto.privEmail} or mobile_number=#{dto.mobileNumber}
    </select>











</mapper>